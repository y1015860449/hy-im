// Code generated by protoc-gen-go. DO NOT EDIT.
// source: im.p2p.proto

package im_app

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

////////////////////////////
// cmd_p2p_msg = 0x2001;
// cmd_p2p_msg_deliver = 0x2004;
///////////////////////////
type P2PMsg struct {
	ToId                 int64    `protobuf:"varint,1,opt,name=toId,proto3" json:"toId,omitempty"`
	FromId               int64    `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Priority             int32    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ClientMsgId          string   `protobuf:"bytes,4,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`
	MsgId                string   `protobuf:"bytes,5,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Encrypt              int32    `protobuf:"varint,6,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	Content              []byte   `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	MsgTime              int64    `protobuf:"varint,8,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	Extend               []byte   `protobuf:"bytes,9,opt,name=extend,proto3" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMsg) Reset()         { *m = P2PMsg{} }
func (m *P2PMsg) String() string { return proto.CompactTextString(m) }
func (*P2PMsg) ProtoMessage()    {}
func (*P2PMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f2e254ad685a22, []int{0}
}

func (m *P2PMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMsg.Unmarshal(m, b)
}
func (m *P2PMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMsg.Marshal(b, m, deterministic)
}
func (m *P2PMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMsg.Merge(m, src)
}
func (m *P2PMsg) XXX_Size() int {
	return xxx_messageInfo_P2PMsg.Size(m)
}
func (m *P2PMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMsg.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMsg proto.InternalMessageInfo

func (m *P2PMsg) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *P2PMsg) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *P2PMsg) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *P2PMsg) GetClientMsgId() string {
	if m != nil {
		return m.ClientMsgId
	}
	return ""
}

func (m *P2PMsg) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *P2PMsg) GetEncrypt() int32 {
	if m != nil {
		return m.Encrypt
	}
	return 0
}

func (m *P2PMsg) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *P2PMsg) GetMsgTime() int64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *P2PMsg) GetExtend() []byte {
	if m != nil {
		return m.Extend
	}
	return nil
}

///////////////////////////////
// cmd_p2p_msg_ack = 0x2002;
// cmd_p2p_msg_notify_ack = 0x2005;
// cmd_p2p_msg_read_ack = 0x2008;
// cmd_p2p_msg_cancel_ack = 0x200c;
///////////////////////////////
type P2PAck struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ClientMsgId          string   `protobuf:"bytes,2,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`
	MsgId                string   `protobuf:"bytes,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgTime              int64    `protobuf:"varint,4,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	ErrCode              int32    `protobuf:"varint,5,opt,name=errCode,proto3" json:"errCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PAck) Reset()         { *m = P2PAck{} }
func (m *P2PAck) String() string { return proto.CompactTextString(m) }
func (*P2PAck) ProtoMessage()    {}
func (*P2PAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f2e254ad685a22, []int{1}
}

func (m *P2PAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PAck.Unmarshal(m, b)
}
func (m *P2PAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PAck.Marshal(b, m, deterministic)
}
func (m *P2PAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PAck.Merge(m, src)
}
func (m *P2PAck) XXX_Size() int {
	return xxx_messageInfo_P2PAck.Size(m)
}
func (m *P2PAck) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PAck.DiscardUnknown(m)
}

var xxx_messageInfo_P2PAck proto.InternalMessageInfo

func (m *P2PAck) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *P2PAck) GetClientMsgId() string {
	if m != nil {
		return m.ClientMsgId
	}
	return ""
}

func (m *P2PAck) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *P2PAck) GetMsgTime() int64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *P2PAck) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

/////////////////////////////////////
// cmd_p2p_msg_deliver_ack = 0x2003;
// cmd_p2p_msg_notify_ack = 0x2005;
// cmd_p2p_msg_read_deliver_ack = 0x2009;
// cmd_p2p_msg_cancel_deliver_ack = 0x200d;
/////////////////////////////////////
type P2PDeliverAck struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FromId               int64    `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ClientMsgId          string   `protobuf:"bytes,3,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`
	MsgId                string   `protobuf:"bytes,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PDeliverAck) Reset()         { *m = P2PDeliverAck{} }
func (m *P2PDeliverAck) String() string { return proto.CompactTextString(m) }
func (*P2PDeliverAck) ProtoMessage()    {}
func (*P2PDeliverAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f2e254ad685a22, []int{2}
}

func (m *P2PDeliverAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PDeliverAck.Unmarshal(m, b)
}
func (m *P2PDeliverAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PDeliverAck.Marshal(b, m, deterministic)
}
func (m *P2PDeliverAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PDeliverAck.Merge(m, src)
}
func (m *P2PDeliverAck) XXX_Size() int {
	return xxx_messageInfo_P2PDeliverAck.Size(m)
}
func (m *P2PDeliverAck) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PDeliverAck.DiscardUnknown(m)
}

var xxx_messageInfo_P2PDeliverAck proto.InternalMessageInfo

func (m *P2PDeliverAck) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *P2PDeliverAck) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *P2PDeliverAck) GetClientMsgId() string {
	if m != nil {
		return m.ClientMsgId
	}
	return ""
}

func (m *P2PDeliverAck) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

////////////////////////////////
// cmd_p2p_msg_notify = 0x2006;     // 消息已接受通知（服务器发送）
////////////////////////////////
type P2PMsgNotify struct {
	ToId                 int64    `protobuf:"varint,1,opt,name=toId,proto3" json:"toId,omitempty"`
	FromId               int64    `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ClientMsgId          string   `protobuf:"bytes,3,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`
	MsgId                string   `protobuf:"bytes,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgTime              int64    `protobuf:"varint,5,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	NotifyId             string   `protobuf:"bytes,6,opt,name=notifyId,proto3" json:"notifyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMsgNotify) Reset()         { *m = P2PMsgNotify{} }
func (m *P2PMsgNotify) String() string { return proto.CompactTextString(m) }
func (*P2PMsgNotify) ProtoMessage()    {}
func (*P2PMsgNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f2e254ad685a22, []int{3}
}

func (m *P2PMsgNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMsgNotify.Unmarshal(m, b)
}
func (m *P2PMsgNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMsgNotify.Marshal(b, m, deterministic)
}
func (m *P2PMsgNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMsgNotify.Merge(m, src)
}
func (m *P2PMsgNotify) XXX_Size() int {
	return xxx_messageInfo_P2PMsgNotify.Size(m)
}
func (m *P2PMsgNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMsgNotify.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMsgNotify proto.InternalMessageInfo

func (m *P2PMsgNotify) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *P2PMsgNotify) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *P2PMsgNotify) GetClientMsgId() string {
	if m != nil {
		return m.ClientMsgId
	}
	return ""
}

func (m *P2PMsgNotify) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *P2PMsgNotify) GetMsgTime() int64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *P2PMsgNotify) GetNotifyId() string {
	if m != nil {
		return m.NotifyId
	}
	return ""
}

//////////////////////////////
// cmd_p2p_msg_read = 0x2007;   // 消息已读
// cmd_p2p_msg_read_deliver = 0x200a;
//////////////////////////////
type P2PMsgRead struct {
	ToId                 int64    `protobuf:"varint,1,opt,name=toId,proto3" json:"toId,omitempty"`
	FromId               int64    `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ClientMsgId          string   `protobuf:"bytes,3,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`
	MsgId                string   `protobuf:"bytes,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgIds               []string `protobuf:"bytes,5,rep,name=msgIds,proto3" json:"msgIds,omitempty"`
	MsgTime              int64    `protobuf:"varint,6,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	Extend               []byte   `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMsgRead) Reset()         { *m = P2PMsgRead{} }
func (m *P2PMsgRead) String() string { return proto.CompactTextString(m) }
func (*P2PMsgRead) ProtoMessage()    {}
func (*P2PMsgRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f2e254ad685a22, []int{4}
}

func (m *P2PMsgRead) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMsgRead.Unmarshal(m, b)
}
func (m *P2PMsgRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMsgRead.Marshal(b, m, deterministic)
}
func (m *P2PMsgRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMsgRead.Merge(m, src)
}
func (m *P2PMsgRead) XXX_Size() int {
	return xxx_messageInfo_P2PMsgRead.Size(m)
}
func (m *P2PMsgRead) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMsgRead.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMsgRead proto.InternalMessageInfo

func (m *P2PMsgRead) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *P2PMsgRead) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *P2PMsgRead) GetClientMsgId() string {
	if m != nil {
		return m.ClientMsgId
	}
	return ""
}

func (m *P2PMsgRead) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *P2PMsgRead) GetMsgIds() []string {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *P2PMsgRead) GetMsgTime() int64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *P2PMsgRead) GetExtend() []byte {
	if m != nil {
		return m.Extend
	}
	return nil
}

////////////////////////////////////////
// cmd_p2p_msg_cancel = 0x200b;   // 消息撤回
// cmd_p2p_msg_cancel_deliver = 0x200e;
////////////////////////////////////////
type P2PMsgCancel struct {
	ToId                 int64    `protobuf:"varint,1,opt,name=toId,proto3" json:"toId,omitempty"`
	FromId               int64    `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ClientMsgId          string   `protobuf:"bytes,3,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`
	MsgId                string   `protobuf:"bytes,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	CancelMsgId          string   `protobuf:"bytes,5,opt,name=cancelMsgId,proto3" json:"cancelMsgId,omitempty"`
	MsgTime              int64    `protobuf:"varint,6,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	Extend               []byte   `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMsgCancel) Reset()         { *m = P2PMsgCancel{} }
func (m *P2PMsgCancel) String() string { return proto.CompactTextString(m) }
func (*P2PMsgCancel) ProtoMessage()    {}
func (*P2PMsgCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f2e254ad685a22, []int{5}
}

func (m *P2PMsgCancel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMsgCancel.Unmarshal(m, b)
}
func (m *P2PMsgCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMsgCancel.Marshal(b, m, deterministic)
}
func (m *P2PMsgCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMsgCancel.Merge(m, src)
}
func (m *P2PMsgCancel) XXX_Size() int {
	return xxx_messageInfo_P2PMsgCancel.Size(m)
}
func (m *P2PMsgCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMsgCancel.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMsgCancel proto.InternalMessageInfo

func (m *P2PMsgCancel) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *P2PMsgCancel) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *P2PMsgCancel) GetClientMsgId() string {
	if m != nil {
		return m.ClientMsgId
	}
	return ""
}

func (m *P2PMsgCancel) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *P2PMsgCancel) GetCancelMsgId() string {
	if m != nil {
		return m.CancelMsgId
	}
	return ""
}

func (m *P2PMsgCancel) GetMsgTime() int64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *P2PMsgCancel) GetExtend() []byte {
	if m != nil {
		return m.Extend
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PMsg)(nil), "im.app.p2pMsg")
	proto.RegisterType((*P2PAck)(nil), "im.app.p2pAck")
	proto.RegisterType((*P2PDeliverAck)(nil), "im.app.p2pDeliverAck")
	proto.RegisterType((*P2PMsgNotify)(nil), "im.app.p2pMsgNotify")
	proto.RegisterType((*P2PMsgRead)(nil), "im.app.p2pMsgRead")
	proto.RegisterType((*P2PMsgCancel)(nil), "im.app.p2pMsgCancel")
}

func init() { proto.RegisterFile("im.p2p.proto", fileDescriptor_88f2e254ad685a22) }

var fileDescriptor_88f2e254ad685a22 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4b, 0x6e, 0xe2, 0x30,
	0x18, 0xc7, 0x65, 0xf2, 0x80, 0x7c, 0xc3, 0x6c, 0xac, 0x11, 0xb2, 0x58, 0x45, 0x59, 0x65, 0xc5,
	0x82, 0x39, 0xc1, 0x88, 0xd9, 0x64, 0x41, 0x17, 0x56, 0x2f, 0x40, 0x63, 0x83, 0xac, 0x12, 0xdb,
	0x72, 0xdc, 0x07, 0x77, 0xe8, 0x41, 0x7a, 0x86, 0x1e, 0xa0, 0xc7, 0xe9, 0x19, 0x2a, 0x3b, 0x0f,
	0x05, 0x24, 0x90, 0xe8, 0x82, 0x9d, 0x7f, 0xfe, 0xe2, 0xf8, 0xf7, 0xf7, 0xe7, 0x04, 0xa6, 0xa2,
	0x5a, 0xe8, 0xa5, 0x5e, 0x68, 0xa3, 0xac, 0xc2, 0xb1, 0xa8, 0x16, 0x1b, 0xad, 0xb3, 0x2f, 0x04,
	0xb1, 0x5e, 0xea, 0x75, 0xbd, 0xc3, 0x18, 0x42, 0xab, 0x0a, 0x46, 0x50, 0x8a, 0xf2, 0x80, 0xfa,
	0x31, 0x9e, 0x41, 0xbc, 0x35, 0xaa, 0x2a, 0x18, 0x19, 0xf9, 0xd9, 0x96, 0xf0, 0x1c, 0x26, 0xda,
	0x08, 0x65, 0x84, 0x3d, 0x90, 0x20, 0x45, 0x79, 0x44, 0x7b, 0xc6, 0x29, 0xfc, 0x2a, 0xf7, 0x82,
	0x4b, 0xbb, 0xae, 0x77, 0x05, 0x23, 0x61, 0x8a, 0xf2, 0x84, 0x0e, 0xa7, 0xf0, 0x1f, 0x88, 0x2a,
	0x5f, 0x8b, 0x7c, 0xad, 0x01, 0x4c, 0x60, 0xcc, 0x65, 0x69, 0x0e, 0xda, 0x92, 0xd8, 0xbf, 0xb2,
	0x43, 0x57, 0x29, 0x95, 0xb4, 0x5c, 0x5a, 0x32, 0x4e, 0x51, 0x3e, 0xa5, 0x1d, 0xba, 0x4a, 0x55,
	0xef, 0xee, 0x45, 0xc5, 0xc9, 0xc4, 0x0b, 0x76, 0xe8, 0xcc, 0xf9, 0xab, 0xe5, 0x92, 0x91, 0xc4,
	0x2f, 0x69, 0x29, 0x7b, 0x6b, 0x02, 0xff, 0x2b, 0x1f, 0xdd, 0x23, 0x4f, 0x35, 0x37, 0x7d, 0xe4,
	0x96, 0x4e, 0x03, 0x8c, 0x2e, 0x04, 0x08, 0x4e, 0x02, 0x74, 0x32, 0xe1, 0xb1, 0x8c, 0x8b, 0x66,
	0xcc, 0x4a, 0x31, 0xee, 0x23, 0xbb, 0x68, 0x0d, 0x66, 0x2f, 0xf0, 0x5b, 0x2f, 0xf5, 0x7f, 0xbe,
	0x17, 0xcf, 0xdc, 0x5c, 0x92, 0x3a, 0xd7, 0x89, 0x13, 0xd9, 0xe0, 0x82, 0x6c, 0x38, 0x90, 0xcd,
	0xde, 0x11, 0x4c, 0x9b, 0xc6, 0xdf, 0x29, 0x2b, 0xb6, 0x87, 0xab, 0xda, 0xff, 0xc3, 0x4d, 0x87,
	0x27, 0x14, 0x1d, 0x9f, 0xd0, 0x1c, 0x26, 0xd2, 0x7b, 0x14, 0xcc, 0x77, 0x3f, 0xa1, 0x3d, 0x67,
	0x1f, 0x08, 0xa0, 0x51, 0xa5, 0x7c, 0xc3, 0x6e, 0x22, 0x3a, 0x83, 0xd8, 0x0f, 0x6a, 0x12, 0xa5,
	0x41, 0x9e, 0xd0, 0x96, 0x86, 0x01, 0xe2, 0x73, 0xf7, 0x6d, 0x7c, 0x74, 0xdf, 0x3e, 0xfb, 0x73,
	0x5e, 0x6d, 0x64, 0xc9, 0xf7, 0x37, 0xd1, 0x77, 0xeb, 0xfc, 0x6e, 0xeb, 0xc1, 0x67, 0x36, 0x9c,
	0xba, 0x3e, 0xc8, 0x43, 0xec, 0x7f, 0x1c, 0x7f, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x7c,
	0x47, 0x77, 0x48, 0x04, 0x00, 0x00,
}

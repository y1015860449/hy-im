// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: p2p.proto

package inner

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ImP2P service

func NewImP2PEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ImP2P service

type ImP2PService interface {
	P2P(ctx context.Context, in *P2PReq, opts ...client.CallOption) (*P2PRsp, error)
}

type imP2PService struct {
	c    client.Client
	name string
}

func NewImP2PService(name string, c client.Client) ImP2PService {
	return &imP2PService{
		c:    c,
		name: name,
	}
}

func (c *imP2PService) P2P(ctx context.Context, in *P2PReq, opts ...client.CallOption) (*P2PRsp, error) {
	req := c.c.NewRequest(c.name, "ImP2P.P2p", in)
	out := new(P2PRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImP2P service

type ImP2PHandler interface {
	P2P(context.Context, *P2PReq, *P2PRsp) error
}

func RegisterImP2PHandler(s server.Server, hdlr ImP2PHandler, opts ...server.HandlerOption) error {
	type imP2P interface {
		P2P(ctx context.Context, in *P2PReq, out *P2PRsp) error
	}
	type ImP2P struct {
		imP2P
	}
	h := &imP2PHandler{hdlr}
	return s.Handle(s.NewHandler(&ImP2P{h}, opts...))
}

type imP2PHandler struct {
	ImP2PHandler
}

func (h *imP2PHandler) P2P(ctx context.Context, in *P2PReq, out *P2PRsp) error {
	return h.ImP2PHandler.P2P(ctx, in, out)
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: group.proto

package inner

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ApiGroup service

func NewApiGroupEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ApiGroup service

type ApiGroupService interface {
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...client.CallOption) (*CreateGroupRsp, error)
	DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...client.CallOption) (*DismissGroupRsp, error)
	ChangeGroupMaster(ctx context.Context, in *ChangeGroupMasterReq, opts ...client.CallOption) (*ChangeGroupMasterRsp, error)
	AddGroupMember(ctx context.Context, in *AddGroupMemberReq, opts ...client.CallOption) (*AddGroupMemberRsp, error)
	RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberReq, opts ...client.CallOption) (*RemoveGroupMemberRsp, error)
	QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, opts ...client.CallOption) (*QuitGroupMemberRsp, error)
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...client.CallOption) (*GetGroupInfoRsp, error)
	GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...client.CallOption) (*GetGroupListRsp, error)
}

type apiGroupService struct {
	c    client.Client
	name string
}

func NewApiGroupService(name string, c client.Client) ApiGroupService {
	return &apiGroupService{
		c:    c,
		name: name,
	}
}

func (c *apiGroupService) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...client.CallOption) (*CreateGroupRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.CreateGroup", in)
	out := new(CreateGroupRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGroupService) DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...client.CallOption) (*DismissGroupRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.DismissGroup", in)
	out := new(DismissGroupRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGroupService) ChangeGroupMaster(ctx context.Context, in *ChangeGroupMasterReq, opts ...client.CallOption) (*ChangeGroupMasterRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.ChangeGroupMaster", in)
	out := new(ChangeGroupMasterRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGroupService) AddGroupMember(ctx context.Context, in *AddGroupMemberReq, opts ...client.CallOption) (*AddGroupMemberRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.AddGroupMember", in)
	out := new(AddGroupMemberRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGroupService) RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberReq, opts ...client.CallOption) (*RemoveGroupMemberRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.RemoveGroupMember", in)
	out := new(RemoveGroupMemberRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGroupService) QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, opts ...client.CallOption) (*QuitGroupMemberRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.QuitGroupMember", in)
	out := new(QuitGroupMemberRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGroupService) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...client.CallOption) (*GetGroupInfoRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.GetGroupInfo", in)
	out := new(GetGroupInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGroupService) GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...client.CallOption) (*GetGroupListRsp, error) {
	req := c.c.NewRequest(c.name, "ApiGroup.GetGroupList", in)
	out := new(GetGroupListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiGroup service

type ApiGroupHandler interface {
	CreateGroup(context.Context, *CreateGroupReq, *CreateGroupRsp) error
	DismissGroup(context.Context, *DismissGroupReq, *DismissGroupRsp) error
	ChangeGroupMaster(context.Context, *ChangeGroupMasterReq, *ChangeGroupMasterRsp) error
	AddGroupMember(context.Context, *AddGroupMemberReq, *AddGroupMemberRsp) error
	RemoveGroupMember(context.Context, *RemoveGroupMemberReq, *RemoveGroupMemberRsp) error
	QuitGroupMember(context.Context, *QuitGroupMemberReq, *QuitGroupMemberRsp) error
	GetGroupInfo(context.Context, *GetGroupInfoReq, *GetGroupInfoRsp) error
	GetGroupList(context.Context, *GetGroupListReq, *GetGroupListRsp) error
}

func RegisterApiGroupHandler(s server.Server, hdlr ApiGroupHandler, opts ...server.HandlerOption) error {
	type apiGroup interface {
		CreateGroup(ctx context.Context, in *CreateGroupReq, out *CreateGroupRsp) error
		DismissGroup(ctx context.Context, in *DismissGroupReq, out *DismissGroupRsp) error
		ChangeGroupMaster(ctx context.Context, in *ChangeGroupMasterReq, out *ChangeGroupMasterRsp) error
		AddGroupMember(ctx context.Context, in *AddGroupMemberReq, out *AddGroupMemberRsp) error
		RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberReq, out *RemoveGroupMemberRsp) error
		QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, out *QuitGroupMemberRsp) error
		GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, out *GetGroupInfoRsp) error
		GetGroupList(ctx context.Context, in *GetGroupListReq, out *GetGroupListRsp) error
	}
	type ApiGroup struct {
		apiGroup
	}
	h := &apiGroupHandler{hdlr}
	return s.Handle(s.NewHandler(&ApiGroup{h}, opts...))
}

type apiGroupHandler struct {
	ApiGroupHandler
}

func (h *apiGroupHandler) CreateGroup(ctx context.Context, in *CreateGroupReq, out *CreateGroupRsp) error {
	return h.ApiGroupHandler.CreateGroup(ctx, in, out)
}

func (h *apiGroupHandler) DismissGroup(ctx context.Context, in *DismissGroupReq, out *DismissGroupRsp) error {
	return h.ApiGroupHandler.DismissGroup(ctx, in, out)
}

func (h *apiGroupHandler) ChangeGroupMaster(ctx context.Context, in *ChangeGroupMasterReq, out *ChangeGroupMasterRsp) error {
	return h.ApiGroupHandler.ChangeGroupMaster(ctx, in, out)
}

func (h *apiGroupHandler) AddGroupMember(ctx context.Context, in *AddGroupMemberReq, out *AddGroupMemberRsp) error {
	return h.ApiGroupHandler.AddGroupMember(ctx, in, out)
}

func (h *apiGroupHandler) RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberReq, out *RemoveGroupMemberRsp) error {
	return h.ApiGroupHandler.RemoveGroupMember(ctx, in, out)
}

func (h *apiGroupHandler) QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, out *QuitGroupMemberRsp) error {
	return h.ApiGroupHandler.QuitGroupMember(ctx, in, out)
}

func (h *apiGroupHandler) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, out *GetGroupInfoRsp) error {
	return h.ApiGroupHandler.GetGroupInfo(ctx, in, out)
}

func (h *apiGroupHandler) GetGroupList(ctx context.Context, in *GetGroupListReq, out *GetGroupListRsp) error {
	return h.ApiGroupHandler.GetGroupList(ctx, in, out)
}
